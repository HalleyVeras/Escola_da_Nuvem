AWSTemplateFormatVersion: '2010-09-09'
Description: Template para provisionar a infraestrutura da Nova Tech na região us-east-1 com alta disponibilidade e segurança

Parameters:
  EnvironmentName:
    Type: String
    Default: NovaTech
    Description: Nome do ambiente (ex: Dev, Staging, Prod)
    AllowedValues: [NovaTechDev, NovaTechStaging, NovaTechProd]
    ConstraintDescription: Deve ser um nome de ambiente válido (Dev, Staging ou Prod)
  
  InstanceType:
    Type: String
    Default: t3.medium
    Description: Tipo de instância EC2
    AllowedValues: [t3.small, t3.medium, t3.large]
  
  DBInstanceType:
    Type: String
    Default: db.t3.medium
    Description: Tipo de instância RDS
    AllowedValues: [db.t3.small, db.t3.medium, db.t3.large]
  
  DBPassword:
    Type: String
    Description: Senha do banco de dados RDS
    NoEcho: true
    MinLength: 8
    MaxLength: 64
    AllowedPattern: "(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$"
    ConstraintDescription: |
      A senha deve ter pelo menos 8 caracteres, contendo letras maiúsculas,
      minúsculas, números e caracteres especiais.

Conditions:
  IsProduction: !Equals [!Ref EnvironmentName, "NovaTechProd"]

Resources:
  # VPC e Sub-redes com melhores práticas de CIDR
  NovaTechVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-vpc"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NovaTechVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-public-subnet-1a"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NovaTechVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-public-subnet-1b"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NovaTechVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-private-subnet-1a"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NovaTechVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-private-subnet-1b"

  # NAT Gateway para subnets privadas
  EIPForNAT:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPForNAT.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-nat-gw"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NovaTechVPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-private-rt"

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-igw"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref NovaTechVPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table and Route for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NovaTechVPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-public-rt"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Groups com regras mais restritivas
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web servers
      VpcId: !Ref NovaTechVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16  # Restrito à VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-web-sg"

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref NovaTechVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-rds-sg"

  # Elastic Load Balancer (ALB) com HTTPS
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${EnvironmentName}-alb"
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref WebSecurityGroup
      Type: application
      IpAddressType: ipv4

  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${EnvironmentName}-tg"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref NovaTechVPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  # Auto Scaling Group com políticas de scaling
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: !If [IsProduction, 2, 1]
      MaxSize: !If [IsProduction, 6, 3]
      DesiredCapacity: !If [IsProduction, 3, 2]
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-asg"
          PropagateAtLaunch: true
      Policies:
        - PolicyName: !Sub "${EnvironmentName}-scale-out-policy"
          PolicyType: TargetTrackingScaling
          TargetTrackingConfiguration:
            PredefinedMetricSpecification:
              PredefinedMetricType: ASGAverageCPUUtilization
            TargetValue: 70.0
        - PolicyName: !Sub "${EnvironmentName}-scale-in-policy"
          PolicyType: TargetTrackingScaling
          TargetTrackingConfiguration:
            PredefinedMetricSpecification:
              PredefinedMetricType: ASGAverageCPUUtilization
            TargetValue: 30.0

  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${EnvironmentName}-launch-template"
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: ami-0c55b159cbfafe1f0  # Amazon Linux 2 - atualizar conforme região
        SecurityGroupIds:
          - !Ref WebSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${EnvironmentName}-webserver"
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd

  # Amazon RDS Instance com melhores configurações
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-rds-subnet-group"

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !If [IsProduction, 100, 20]
      DBInstanceClass: !Ref DBInstanceType
      Engine: MySQL
      EngineVersion: "8.0"
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      DBName: NovaTechDB
      MultiAZ: !If [IsProduction, true, false]
      StorageType: gp3
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      BackupRetentionPeriod: !If [IsProduction, 7, 3]
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-rds"

  # Amazon S3 Bucket com versionamento e logging
  StaticContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${EnvironmentName}-static-content-${AWS::AccountId}"
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Sub "${EnvironmentName}-logs-${AWS::AccountId}"
        LogFilePrefix: "s3/"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-static-content"

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${EnvironmentName}-logs-${AWS::AccountId}"
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-logs"

Outputs:
  VPCId:
    Description: ID da VPC
    Value: !Ref NovaTechVPC
    Export:
      Name: !Sub "${EnvironmentName}-VPCID"
  
  LoadBalancerDNS:
    Description: URL do Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${EnvironmentName}-ALBDNS"
  
  DatabaseEndpoint:
    Description: Endpoint do banco de dados RDS
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub "${EnvironmentName}-DBEndpoint"
  
  StaticContentBucketName:
    Description: Nome do bucket S3 para conteúdo estático
    Value: !Ref StaticContentBucket
    Export:
      Name: !Sub "${EnvironmentName}-StaticBucket"
